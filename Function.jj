options {
    STATIC = false;
}

PARSER_BEGIN(Function)
public class Function{
        Func[] funcl;
        int nonamefuncnum;
    	class FuncType{
		final static int F=0,SF=1,SSF=2;
	}
        class Sentence{
                String[] input;
                String func;
                String[] funcarg;
                String[] output;
        }
        class Func{
        	int type;
        	String name;
        	String[] arg;
                SwitchF ssf;
                SignalF sf;
                Sfunc f;
        }
        class EventBranch{
                String guard;
                String eventval;
                String[] expr;
        }

        class Branch{
                String guard;
                String ssfname;
                String[] expr;
        }

        class SwitchF{
                String arg1_f;
                String[] arg1_arg;
                String arg2_f;
        }
        class SignalF{
                String[] input;
                Sentence[] process;
                String[] output;
                EventBranch[] event;
        }
        class Sfunc{
                Branch[] change;
        }

        public static String[] addString(String[] list,String data){
                String[] after;
                if(list == null){
                        after = new String[1];
                        after[0] = data;
                }
                else{
                        after = new String[list.length + 1];
                        for(int i=0;i<list.length;i++){
                                after[i] = list[i];
                        }
                after[list.length] = data;
                }
                return after;
        }


        public static Func[] addFunc(Func[] list,Func data){
                Func[] after;
                if(list == null){
                        after = new Func[1];
                        after[0] = data;
                }
                else{
                        after = new Func[list.length + 1];
                        for(int i=0;i<list.length;i++){
                                after[i] = list[i];
                        }
                after[list.length] = data;
                }
                return after;
        }

        public static Branch[] addBranch(Branch[] list,Branch data){
                Branch[] after;
                if(list == null){
                        after = new Branch[1];
                        after[0] = data;
                }
                else{
                        after = new Branch[list.length + 1];
                        for(int i=0;i<list.length;i++){
                                after[i] = list[i];
                        }
                after[list.length] = data;
                }
                return after;
        }

        public static EventBranch[] addEventBranch(EventBranch[] list,EventBranch data){
                EventBranch[] after;
                if(list == null){
                        after = new EventBranch[1];
                        after[0] = data;
                }
                else{
                        after = new EventBranch[list.length + 1];
                        for(int i=0;i<list.length;i++){
                                after[i] = list[i];
                        }
                after[list.length] = data;
                }
                return after;
        }

        public static Sentence[] addSentence(Sentence[] list,Sentence data){
                Sentence[] after;
                if(list == null){
                        after = new Sentence[1];
                        after[0] = data;
                }
                else{
                        after = new Sentence[list.length + 1];
                        for(int i=0;i<list.length;i++){
                                after[i] = list[i];
                        }
                after[list.length] = data;
                }
                return after;
        }

        public static String[] strlist(String str){
                String[] list = new String[1];
                list[0] = str;
                return list;
        }

        public String parserInfo(){
                String str = "";
                for(int i=0;i<funcl.length;i++){
                        str = str + "----------Function" + (i+1) + "----------\n";
                        str = str + "Name: " + funcl[i].name + "\n";
                        if(funcl[i].arg != null){
                                for(int j=0;j<funcl[i].arg.length;j++){
                                        str = str + "Arg" + (j+1) + ": " + funcl[i].arg[j] + "\n";
                                }
                        }
                        str = str + "Type: " + funcl[i].type + "\n";
                        switch(funcl[i].type){
                                case FuncType.SSF:
                                        str = str + "Arg1_F: " + funcl[i].ssf.arg1_f + "\n";
                                        if(funcl[i].ssf.arg1_arg != null){ 
                                                for(int j=0;j<funcl[i].ssf.arg1_arg.length;j++){
                                                        str = str + "Arg1_Arg" + (j+1) + ": " + funcl[i].ssf.arg1_arg[j] + "\n";
                                                } 
                                        }  
                                        str = str + "Arg2_F: " + funcl[i].ssf.arg2_f + "\n";
                                        break;
                                case FuncType.SF:
                                        if(funcl[i].sf.input != null){
                                                for(int j=0;j<funcl[i].sf.input.length;j++){
                                                        str = str + "Input" + (j+1) + ": " + funcl[i].sf.input[j] + "\n";
                                                }   
                                        }
                                        for(int j=0;j<funcl[i].sf.process.length;j++){
                                                str = str + "Process" + (j+1) + ": \n";
                                                for(int k=0;k<funcl[i].sf.process[j].input.length;k++){
                                                        str = str + "Input" + (k+1) + ": " + funcl[i].sf.process[j].input[k] + "\n";
                                                }
                                                str = str + "Func: " + funcl[i].sf.process[j].func + "\n";
                                                if(funcl[i].sf.process[j].funcarg != null){
                                                        for(int k=0;k<funcl[i].sf.process[j].funcarg.length;k++){
                                                                str = str + "FuncArg" + (k+1) + ": " + funcl[i].sf.process[j].funcarg[k] + "\n";
                                                        }
                                                }
                                                for(int k=0;k<funcl[i].sf.process[j].output.length;k++){
                                                        str = str + "Output" + (k+1) + ": " + funcl[i].sf.process[j].output[k] + "\n";
                                                }                                      
                                        }
                                        if(funcl[i].sf.output != null){
                                                for(int j=0;j<funcl[i].sf.output.length;j++){
                                                        str = str + "Output" + (j+1) + ": " + funcl[i].sf.output[j] + "\n";
                                                }   
                                        }
                                        if(funcl[i].sf.event != null){
                                                for(int k=0;k<funcl[i].sf.event.length;k++){
                                                        str = str + "Event" + (k+1) + ":\n";
                                                        str = str + "Guard:\n";
                                                        str = str + funcl[i].sf.event[k].guard + "\n";
                                                        str = str + "EventVal: " + funcl[i].sf.event[k].eventval + "\n";
                                                        for(int j=0;j<funcl[i].sf.event[k].expr.length;j++){
                                                                str = str + "Expr" + (j+1) + ": " + funcl[i].sf.event[k].expr[j] + "\n";
                                                        }
                                                }
                                        } 
                                        break;
                                case FuncType.F:
                                        for(int k=0;k<funcl[i].f.change.length;k++){
                                                str = str + "Change" + (k+1) + ":\n";
                                                str = str + "Guard: " + funcl[i].f.change[k].guard + "\n";
                                                str = str + "SSFName: " + funcl[i].f.change[k].ssfname + "\n";
                                                for(int j=0;j<funcl[i].f.change[k].expr.length;j++){
                                                        str = str + "Expr" + (j+1) + ": " + funcl[i].f.change[k].expr[j] + "\n";
                                                }
                                        }
                                        break;
                                default:
                                        break;
                        }
                        str = str + "\n";    
                }

                return str;
        }

}

PARSER_END(Function)

SKIP    :{
        " "
    |   "\t"
    |   "\r"
    |   "\f"
}

TOKEN   :{
        < LP:       "(" >
    |   < RP:       ")" >
    |   < COMMA:    "," >
    |   < AND:      "&&" >
    |   < OR:       "||" >
    |   < NOT:      "not" >
    |   < SWITCH:   "switch" >
    |   < RARROW:   "->" >
    |   < LARROW:   "<-" >
    |   < INARROW:  "-<" >
    |   < YEN:      "\\" >
    |   < IF:       "if" >
    |   < THEN:     "then">
    |   < ELSE:     "else" >
    |   < PROC:     "proc">
    |   < DO:       "do" >
    |   < INTEGRAL: "integral" >
    |   < ARR:      "arr" >
    |   < EDGE:     "edge" >
    |   < EVENT:    "Event" >
    |   < NOEVENT:  "NoEvent" >
    |   < RETURN:   "returnA" >
    |   < TAG:      "`tag`" >
    |   < NEQ:      "/=">
    |   < WHERE:    "where" >
    |   < COMPARE:  "<=" | ">=" | "<" | ">" | "==" >
    |   < OP1:      "-">
    |   < OP2:      "+" | "*" | "/">
    |   < EQ:       "=">
    |   < NL:       "\n">
    |   < VALUE:    ["a"-"z"](["0"-"9","a"-"z","A"-"Z","\'","_"])* >
    |   < NUMBER:   ("-")?(["0"-"9"]|["1"-"9"](["0"-"9"])*)(["."](["0"-"9"])+)? >

}
String OP()       :
{Token t=null;}
{
        t=<OP1> {return t.image;}

    |   t=<OP2> {return t.image;}
}

void start()    :
{}
{
        all()
}

void all() :
{}
{
        {
         funcl = null; 
         nonamefuncnum = 0;
        } 
        funclist()
}

void funclist() :
{Func func;}
{
        (func=funcunit() ((<WHERE> <NL>) | (<NL>)+) {funcl = addFunc(funcl,func);} )+
}

Func funcunit() :
{Token t = null;
 String[] arg;
 Func func;
}
{
        t=<VALUE> arg=arglist() <EQ> func=functype() {  
                                                        func.name = t.image; 
                                                        func.arg = arg; 
                                                        return func;
                                                     }
}

Func functype() :
{Func func = new Func();}
{
        func.ssf=Switch() {
                                func.type = FuncType.SSF; 
                                func.sf = null; 
                                func.f = null; 
                                return func;
                          }

    |   func.sf=SF() {
                        func.type = FuncType.SF; 
                        func.ssf = null; 
                        func.f = null; 
                        return func;
                     }

    |   func.f=sfunc() {
                        func.type = FuncType.F; 
                        func.ssf = null; 
                        func.sf = null; 
                        return func;
                       }
}

SwitchF Switch()   :
{SwitchF ssf;
 String name;
 }
{
        <SWITCH> ssf=arg1() name=arg2(){
                                        ssf.arg2_f=name; 
                                        return ssf;
                                       }
}

SwitchF arg1() :
{Token t = null;
 String[] arg;
 SwitchF ssf = new SwitchF();
}
{
        t=<VALUE> {
                        ssf.arg1_f = t.image; 
                        ssf.arg1_arg=null; 
                        return ssf;
                  }

    |   LOOKAHEAD(2) <LP> t=<VALUE> arg=arglist() <RP> {
                                                        ssf.arg1_f = t.image; 
                                                        ssf.arg1_arg=arg; 
                                                        return ssf;
                                                       }

    |   <LP> ssf=arg1() <RP> {return ssf;}
}

String arg2() :
{Token t = null;
 String name;
}
{
        t=<VALUE> {return t.image;}

    |   nonamefunc() {  
                        name = "Nonamefunc" + nonamefuncnum; 
                        nonamefuncnum++; 
                        return name;
                     }

    |   <LP> name=arg2() <RP> {return name;} 
}

void nonamefunc()   :
{Func func = new Func();
 Sfunc f = new Sfunc();
 String[] arg;
}
{
        <YEN> arg=arglist() <RARROW> f.change=ifswitch(null,"") {
                                                                 func.type = FuncType.F; 
                                                                 func.ssf = null; 
                                                                 func.sf = null; 
                                                                 func.f = f; 
                                                                 func.name = "Nonamefunc" + nonamefuncnum; 
                                                                 func.arg = arg;
                                                                 funcl = addFunc(funcl,func);
                                                                }
}

Branch[] ifswitch(Branch[] change,String guard) :
{Token t = null;
 String[] arg;
 String thenG;
 String elseG;
 Branch br = new Branch();
 Branch[] after;
 String str;
}
{
        <IF> <LP> str=guard() {
                                if(guard.equals("")){ 
                                        thenG = "(" + str + ")"; 
                                        elseG = "not (" + str + ")";
                                } 
                                else{ 
                                        thenG = " and\n(" + str + ")";
                                        elseG = " and\nnot (" + str + ")";
                                }
                              }
                              <RP> <THEN> after=ifswitch(change,guard + thenG) <ELSE> after=ifswitch(after,guard + elseG) {return after;}

    |   t=<VALUE> arg=arglist2() {
                                   br.ssfname = t.image; 
                                   br.expr = arg; 
                                   br.guard = guard; 
                                   after = addBranch(change,br); 
                                   return after;
                                 }

    |   <LP> after=ifswitch(change,guard) <RP> {return after;}
}

String[] inputlist()    :
{String[] list;}
{
        LOOKAHEAD(unit()) unit() {return null;}
    |   list=valuetaple() {return list;}
}

String[] introSF()  :
{String[] input = null;}
{
        <PROC> input=inputlist() <RARROW> <DO> <NL> {return input;}
}

Sentence arrowlist() :
{Sentence sen = new Sentence();
 Token t = null;
 String in;
 String op;
 String oparg;
 String[] arg = null;
 String[] input = null;
 String[] output = null;
}
{
        LOOKAHEAD(5) t=<VALUE> <LARROW> <INTEGRAL> <INARROW> in=valornum() {
                                                                                sen.output = strlist(t.image); 
                                                                                sen.func = "integral"; 
                                                                                sen.funcarg = null; 
                                                                                sen.input = strlist(in); 
                                                                                return sen;
                                                                           }

    |   LOOKAHEAD(5) t=<VALUE> <LARROW> <ARR> <LP> op=OP() oparg=valornum() <RP> <INARROW> in=valornum() {
                                                                                                                sen.output = strlist(t.image); 
                                                                                                                sen.func = "arr"; 
                                                                                                                sen.funcarg = new String[2]; 
                                                                                                                sen.funcarg[0] = op; 
                                                                                                                sen.funcarg[1] = oparg; 
                                                                                                                sen.input = strlist(in); 
                                                                                                                return sen;
                                                                                                         }

    |   LOOKAHEAD(5) t=<VALUE> <LARROW> <EDGE> <INARROW> in=guard() {
                                                                        sen.output = strlist(t.image);
                                                                        sen.func = "edge"; 
                                                                        sen.funcarg = null; 
                                                                        sen.input = strlist(in); 
                                                                        return sen;
                                                                    }

    |   output=valuetaple() <LARROW> t=<VALUE> arg=arglist() <INARROW> input=valnumtaple() {
                                                                                                sen.output = output; 
                                                                                                sen.func=t.image; 
                                                                                                sen.funcarg = arg; 
                                                                                                sen.input = input; 
                                                                                                return sen;
                                                                                           }
}
SignalF SF()       :
{String[] input = null;
 Sentence sen;
 Sentence[] process=null;
 SignalF sf;
}
{
        input=introSF() (sen=arrowlist()  <NL> {
                                                process = addSentence(process,sen);
                                               }
                                               )+ <RETURN> <INARROW> sf=Return() {
                                                                                        sf.input = input; 
                                                                                        sf.process=process; 
                                                                                        return sf;
                                                                                 }
}

SignalF Return()   :
{SignalF sf;}
{
        LOOKAHEAD(rootReturn()) sf=rootReturn() {return sf;}
    |   sf=childReturn() {return sf;} 
}

SignalF rootReturn()   :
{SignalF sf = new SignalF();}
{
        <LP> sf.output=exprtaple() <COMMA> sf.event=ifevent(null,"") <RP> {return sf;}
}

String eventval() :
{Token t = null;
 String str;
}
{
        t=<VALUE> {return t.image;} 
    |   <EVENT> unit() {return "Event()";}
    |   <NOEVENT> {return "NoEvent";}
    |   <LP> str=eventval() <RP> {return str;}
}

EventBranch[] ifevent(EventBranch[] event,String guard)  :
{String val;
 String[] output = null;
 String thenG;
 String elseG;
 EventBranch br = new EventBranch();
 EventBranch[] after = null;
 String str;
}
{
        <IF> <LP> str=eventguard() {
                                        if(guard.equals("")){ 
                                                thenG = "(" + str + ")"; 
                                                elseG = "not (" + str + ")";
                                        } 
                                        else{ 
                                                thenG = " and\n(" + str + ")"; 
                                                elseG = " and\nnot (" + str + ")";
                                        }
                                   }<RP> <THEN> after=ifevent(event,guard + thenG) <ELSE> after=ifevent(after,guard + elseG) {return after;}

    |   LOOKAHEAD(eventval()) val=eventval() <TAG> output=exprtaple() {
                                                                        br.guard = guard; 
                                                                        br.eventval = val; 
                                                                        br.expr=output; 
                                                                        after=addEventBranch(event,br); 
                                                                        return after;
                                                                      }

    |   <LP> after=ifevent(event,guard) <RP> {return after;}
}

String eventguard()   :
{String str;
 String str2;
 Token t = null;
}
{
        <LP> str=eventguard() <RP> {
                                        str = "(" + str + ")";
                                   }  
                                   (LOOKAHEAD(2) (t=<AND> | t=<OR>) str2=eventguard() {
                                                                                        str = str + " " + t.image + " " + str2;
                                                                                      }
                                                                                      )* {return str;}

    |   t=<VALUE> <NEQ> <NOEVENT> {
                                        str = t.image + " /= NoEvent";
                                  } 
                                  (LOOKAHEAD(2) (t=<AND> | t=<OR>) str2=eventguard() {
                                                                                        str = str + " " + t.image + " " + str2;
                                                                                     }
                                                                                     )* {return str;}

    |   <NOT> <LP> str=eventguard() <RP> {
                                                str = "not (" + str + ")";
                                         }
                                         (LOOKAHEAD(2) (t=<AND> | t=<OR>) str2=eventguard() {
                                                                                                str = str + " " + t.image + " " + str2;
                                                                                            }
                                                                                            )* {return str;}
}

SignalF childReturn()  :
{SignalF sf = new SignalF();}
{
        sf.output=valuetaple(){
                                sf.event=null; 
                                return sf;
                              }
}

Sfunc sfunc()    :
{Sfunc f = new Sfunc();}
{
        f.change=ifswitch(null,"")  {return f;}
}

String valornum() :
{Token t= null;}
{
        t=<VALUE> {return t.image;}
    |   <OP1> t=<VALUE> {return "-" + t.image;}
    |   t=<NUMBER> {return t.image;}
}

String[] valuetaple()   :
{Token t=null;
 String[] list = null;
}
{
        t=<VALUE> {return strlist(t.image);}
    |   <LP> t=<VALUE> {
                        list = strlist(t.image);
                       } (<COMMA> t=<VALUE> {
                                                list = addString(list,t.image);
                                            }
                                            )* <RP> {return list;}
}

String[] valnumtaple()  :
{String t;
 String[] list = null;
}
{
        t=valornum() {return strlist(t);}
    |   <LP> t=valornum() {
                                list = strlist(t);
                          }
                          (<COMMA> t=valornum(){
                                                list = addString(list,t);
                                               }
                                               )* <RP> {return list;}
}

String[] exprtaple()        :
{String str;
 String[] list = null;
}
{
        LOOKAHEAD(expression()) str=expression() {return strlist(str);}
    |   <LP> str=expression() {
                                list = strlist(str);
                              } 
                              (<COMMA> str=expression(){
                                                        list = addString(list,str);
                                                       }
                                                       )* <RP> {return list;}
}

String guard()    :
{String str;
 String str2;
 Token t=null;
}
{
    LOOKAHEAD(5) <LP> str=guard() <RP> {
                                str = "(" + str + ")";
                          } 
                          (LOOKAHEAD(2) (t=<AND> | t=<OR>) str2=guard() {
                                                                         str = str + " " + t.image + " " + str2;
                                                                        }
                                                                        )* {return str;}

    |   <NOT> <LP> str=guard() <RP> {
                                        str = "not (" + str + ")"; 
                                    } 
                                    (LOOKAHEAD(2) (t=<AND> | t=<OR>) str2=guard() {
                                                                                        str = str + " " + t.image + " " + str2;
                                                                                  }
                                                                                  )* {return str;}

    |   LOOKAHEAD(5) str=expression() t=<COMPARE> str2=expression() {
                                                        str = str + " " + t.image + " " + str2;
                                                   } 
                                                   (LOOKAHEAD(2) (t=<AND> | t=<OR>) str2=guard() {
                                                                                                        str = str + " " + t.image + " " + str2;
                                                                                                 }
                                                                                                 )* {return str;}
}

void unit() :
{}
{
        <LP> <RP>
}

String[] arglist()  :
{String[] list = null;
 String[] taple = null;
}
{
        (taple=valuetaple() {
                                for(int i=0;i<taple.length;i++){
                                        list = addString(list,taple[i]);
                                }
                            }
                            )* {return list;}
}

String[] arglist2() :
{String[] list = null;
 String[] taple = null;
}
{
        (taple=exprtaple() {
                                for(int i=0;i<taple.length;i++){
                                        list = addString(list,taple[i]);
                                }
                           }
                           )* {return list;}
}

String expression()       :
{String str;
 String str2;
 String op;
 Token t = null;
}
{
        <LP> str=expression() <RP> {
                                        str = "(" + str + ")"; 
                                        return str;
                                   }

    |              str=valornum() (LOOKAHEAD(2) op=OP() str2=expression() {
                                                                                str = str + " " + op + " " + str2;
                                                                          }
                                                                          )* {return str;}
}